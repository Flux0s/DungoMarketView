// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DiscordMessage {
    id              Int      @id @default(autoincrement())
    type            String
    content         String
    mentions        Json[] // Use Json[] as we don't have a specific type for mentions in TypeScript
    mentionRoles    Json[]
    attachments     Json[]
    embeds          Embed[]
    timestamp       DateTime
    editedTimestamp DateTime
    flags           String
    components      Json[]
    channelId       String
    author          Author   @relation(fields: [authorId], references: [id])
    authorId        String

    @@index([type, content])
}

model Author {
    id             String           @id @default(cuid())
    username       String?
    avatar         String?
    discriminator  String?
    publicFlags    Int
    flags          Int
    bot            Boolean
    DiscordMessage DiscordMessage[]
}

model Embed {
    id                 String          @id @default(cuid())
    type               String
    title              String
    description        String
    color              Int
    contentScanVersion String
    DiscordMessage     DiscordMessage? @relation(fields: [discordMessageId], references: [id])
    discordMessageId   Int?
}
